{
    "sourceFile": "middlewares/authJwt.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 136,
            "patches": [
                {
                    "date": 1687153453737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1687153459982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n   });\n };\n \n isSuperAdmin = (req, res, next) => {\n-  \n+  console.log(req)\n   User.findById(req.userId).exec((err, user) => {\n     if (err) {\n       res.status(500).send({ message: err });\n       return;\n"
                },
                {
                    "date": 1687153827149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,8 @@\n   });\n };\n \n isSuperAdmin = (req, res, next) => {\n-  console.log(req)\n   User.findById(req.userId).exec((err, user) => {\n     if (err) {\n       res.status(500).send({ message: err });\n       return;\n"
                },
                {
                    "date": 1687154680814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,8 +92,9 @@\n   });\n };\n \n isSuperAdmin = (req, res, next) => {\n+  \n   User.findById(req.userId).exec((err, user) => {\n     if (err) {\n       res.status(500).send({ message: err });\n       return;\n"
                },
                {
                    "date": 1687154687361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,8 +92,9 @@\n   });\n };\n \n isSuperAdmin = (req, res, next) => {\n+  cl\n   \n   User.findById(req.userId).exec((err, user) => {\n     if (err) {\n       res.status(500).send({ message: err });\n"
                },
                {
                    "date": 1687154692933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,10 +92,9 @@\n   });\n };\n \n isSuperAdmin = (req, res, next) => {\n-  cl\n-  \n+  console.log()\n   User.findById(req.userId).exec((err, user) => {\n     if (err) {\n       res.status(500).send({ message: err });\n       return;\n"
                },
                {
                    "date": 1687154698218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n   });\n };\n \n isSuperAdmin = (req, res, next) => {\n-  console.log()\n+  console.log(req.user)\n   User.findById(req.userId).exec((err, user) => {\n     if (err) {\n       res.status(500).send({ message: err });\n       return;\n"
                },
                {
                    "date": 1687154735539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n-const jwt = require(\"jsonwebtoken\");\n-const config = require(\"../config/auth.config.js\");\n-const db = require(\"../models\");\n-const User = db.user;\n-const Role = db.role;\n+const jwt = require(\"jsonwebtoken\")\n+const config = require(\"../config/auth.config.js\")\n+const db = require(\"../models\")\n+const User = db.user\n+const Role = db.role\n \n const { TokenExpiredError } = jwt\n \n const catchError = (err, res) => {\n@@ -14,184 +14,184 @@\n }\n \n verifyToken = (req, res, next) => {\n   let token = req.headers[\"x-access-token\"]\n-  //let token = req.session.token;\n+  //let token = req.session.token\n \n   if (!token) {\n-    return res.status(403).send({ message: \"No token provided!\" });\n+    return res.status(403).send({ message: \"No token provided!\" })\n   }\n \n   jwt.verify(token, config.secret, (err, decoded) => {\n     if (err) {\n-      return catchError(err, res);\n+      return catchError(err, res)\n     }\n-    req.userId = decoded.id;\n-    next();\n-  });\n-};\n+    req.userId = decoded.id\n+    next()\n+  })\n+}\n \n isAdmin = (req, res, next) => {\n   User.findById(req.userId).exec((err, user) => {\n     if (err) {\n-      res.status(500).send({ message: err });\n-      return;\n+      res.status(500).send({ message: err })\n+      return\n     }\n \n     Role.find(\n       {\n         _id: { $in: user.roles },\n       },\n       (err, roles) => {\n         if (err) {\n-          res.status(500).send({ message: err });\n-          return;\n+          res.status(500).send({ message: err })\n+          return\n         }\n \n-        for (let i = 0; i < roles.length; i++) {\n+        for (let i = 0 i < roles.length i++) {\n           if (roles[i].name === \"admin\") {\n-            next();\n-            return;\n+            next()\n+            return\n           }\n         }\n \n-        res.status(403).send({ message: \"Require Admin Role!\" });\n-        return;\n+        res.status(403).send({ message: \"Require Admin Role!\" })\n+        return\n       }\n-    );\n-  });\n-};\n+    )\n+  })\n+}\n \n isBranchAdmin = (req, res, next) => {\n   User.findById(req.userId).exec((err, user) => {\n     if (err) {\n-      res.status(500).send({ message: err });\n-      return;\n+      res.status(500).send({ message: err })\n+      return\n     }\n \n     Role.find(\n       {\n         _id: { $in: user.roles },\n       },\n       (err, roles) => {\n         if (err) {\n-          res.status(500).send({ message: err });\n-          return;\n+          res.status(500).send({ message: err })\n+          return\n         }\n \n-        for (let i = 0; i < roles.length; i++) {\n+        for (let i = 0 i < roles.length i++) {\n           if (roles[i].name === \"branchadmin\") {\n-            next();\n-            return;\n+            next()\n+            return\n           }\n         }\n \n-        res.status(403).send({ message: \"Require branchadmin Role!\" });\n-        return;\n+        res.status(403).send({ message: \"Require branchadmin Role!\" })\n+        return\n       }\n-    );\n-  });\n-};\n+    )\n+  })\n+}\n \n isSuperAdmin = (req, res, next) => {\n-  console.log(req.user)\n+  console.log(req.userId)\n   User.findById(req.userId).exec((err, user) => {\n     if (err) {\n-      res.status(500).send({ message: err });\n-      return;\n+      res.status(500).send({ message: err })\n+      return\n     }\n \n     Role.find(\n       {\n         _id: { $in: user.roles },\n       },\n       (err, roles) => {\n         if (err) {\n-          res.status(500).send({ message: err });\n-          return;\n+          res.status(500).send({ message: err })\n+          return\n         }\n \n-        for (let i = 0; i < roles.length; i++) {\n+        for (let i = 0 i < roles.length i++) {\n           if (roles[i].name === \"superadmin\") {\n-            next();\n-            return;\n+            next()\n+            return\n           }\n         }\n \n-        res.status(403).send({ message: \"Require superadmin Role!\" });\n-        return;\n+        res.status(403).send({ message: \"Require superadmin Role!\" })\n+        return\n       }\n-    );\n-  });\n-};\n+    )\n+  })\n+}\n \n isStaffAccount = (req, res, next) => {\n   User.findById(req.userId).exec((err, user) => {\n     if (err) {\n-      res.status(500).send({ message: err });\n-      return;\n+      res.status(500).send({ message: err })\n+      return\n     }\n \n     Role.find(\n       {\n         _id: { $in: user.roles },\n       },\n       (err, roles) => {\n         if (err) {\n-          res.status(500).send({ message: err });\n-          return;\n+          res.status(500).send({ message: err })\n+          return\n         }\n \n-        for (let i = 0; i < roles.length; i++) {\n+        for (let i = 0 i < roles.length i++) {\n           if (roles[i].name === \"staffaccount\") {\n-            next();\n-            return;\n+            next()\n+            return\n           }\n         }\n \n-        res.status(403).send({ message: \"Require staffaccount Role!\" });\n-        return;\n+        res.status(403).send({ message: \"Require staffaccount Role!\" })\n+        return\n       }\n-    );\n-  });\n-};\n+    )\n+  })\n+}\n \n isOperationalAdmin = (req, res, next) => {\n   User.findById(req.userId).exec((err, user) => {\n     if (err) {\n-      res.status(500).send({ message: err });\n-      return;\n+      res.status(500).send({ message: err })\n+      return\n     }\n \n     Role.find(\n       {\n         _id: { $in: user.roles },\n       },\n       (err, roles) => {\n         if (err) {\n-          res.status(500).send({ message: err });\n-          return;\n+          res.status(500).send({ message: err })\n+          return\n         }\n \n-        for (let i = 0; i < roles.length; i++) {\n+        for (let i = 0 i < roles.length i++) {\n           if (roles[i].name === \"operationaladmin\") {\n-            next();\n-            return;\n+            next()\n+            return\n           }\n         }\n \n-        res.status(403).send({ message: \"Require OperationalAdmin Role!\" });\n-        return;\n+        res.status(403).send({ message: \"Require OperationalAdmin Role!\" })\n+        return\n       }\n-    );\n-  });\n-};\n+    )\n+  })\n+}\n \n const authJwt = {\n   verifyToken,\n   isAdmin,\n   isBranchAdmin,\n   isSuperAdmin,\n   isStaffAccount,\n   isOperationalAdmin\n-};\n-module.exports = authJwt;\n+}\n+module.exports = authJwt\n"
                },
                {
                    "date": 1687154749009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n           res.status(500).send({ message: err })\n           return\n         }\n \n-        for (let i = 0 i < roles.length i++) {\n+        for (let i = 0; i < roles.length i++) {\n           if (roles[i].name === \"superadmin\") {\n             next()\n             return\n           }\n"
                },
                {
                    "date": 1687154762333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n           res.status(500).send({ message: err })\n           return\n         }\n \n-        for (let i = 0; i < roles.length i++) {\n+        for (let i = 0; i < roles.length; i++) {\n           if (roles[i].name === \"superadmin\") {\n             next()\n             return\n           }\n@@ -140,9 +140,9 @@\n           res.status(500).send({ message: err })\n           return\n         }\n \n-        for (let i = 0 i < roles.length i++) {\n+        for (let i = 0; i < roles.length i++) {\n           if (roles[i].name === \"staffaccount\") {\n             next()\n             return\n           }\n"
                },
                {
                    "date": 1687154773409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n           res.status(500).send({ message: err })\n           return\n         }\n \n-        for (let i = 0; i < roles.length i++) {\n+        for (let i = 0; i < roles.length; i++) {\n           if (roles[i].name === \"staffaccount\") {\n             next()\n             return\n           }\n@@ -171,9 +171,9 @@\n           res.status(500).send({ message: err })\n           return\n         }\n \n-        for (let i = 0 i < roles.length i++) {\n+        for (let i = 0; i < roles.length i++) {\n           if (roles[i].name === \"operationaladmin\") {\n             next()\n             return\n           }\n"
                },
                {
                    "date": 1687154782046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n           res.status(500).send({ message: err })\n           return\n         }\n \n-        for (let i = 0 i < roles.length i++) {\n+        for (let i = 0; i < roles.length i++) {\n           if (roles[i].name === \"admin\") {\n             next()\n             return\n           }\n@@ -171,9 +171,9 @@\n           res.status(500).send({ message: err })\n           return\n         }\n \n-        for (let i = 0; i < roles.length i++) {\n+        for (let i = 0; i < roles.length; i++) {\n           if (roles[i].name === \"operationaladmin\") {\n             next()\n             return\n           }\n"
                },
                {
                    "date": 1687154790933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n           res.status(500).send({ message: err })\n           return\n         }\n \n-        for (let i = 0; i < roles.length i++) {\n+        for (let i = 0; i < roles.length; i++) {\n           if (roles[i].name === \"admin\") {\n             next()\n             return\n           }\n@@ -77,9 +77,9 @@\n           res.status(500).send({ message: err })\n           return\n         }\n \n-        for (let i = 0 i < roles.length i++) {\n+        for (let i = 0; i < roles.length i++) {\n           if (roles[i].name === \"branchadmin\") {\n             next()\n             return\n           }\n"
                },
                {
                    "date": 1687155334639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n   jwt.verify(token, config.secret, (err, decoded) => {\n     if (err) {\n       return catchError(err, res)\n     }\n+    cl\n     req.userId = decoded.id\n     next()\n   })\n }\n@@ -77,9 +78,9 @@\n           res.status(500).send({ message: err })\n           return\n         }\n \n-        for (let i = 0; i < roles.length i++) {\n+        for (let i = 0; i < roles.length; i++) {\n           if (roles[i].name === \"branchadmin\") {\n             next()\n             return\n           }\n"
                },
                {
                    "date": 1687155340561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,198 @@\n+const jwt = require(\"jsonwebtoken\")\n+const config = require(\"../config/auth.config.js\")\n+const db = require(\"../models\")\n+const User = db.user\n+const Role = db.role\n+\n+const { TokenExpiredError } = jwt\n+\n+const catchError = (err, res) => {\n+  if(err instanceof TokenExpiredError) {\n+    return res.status(401).send({ message: \"Unauthorized! Access Token was expired!\" })\n+  }\n+  return res.sendStatus(401).send({ message: \"Unauthorised!\"})\n+}\n+\n+verifyToken = (req, res, next) => {\n+  let token = req.headers[\"x-access-token\"]\n+  //let token = req.session.token\n+\n+  if (!token) {\n+    return res.status(403).send({ message: \"No token provided!\" })\n+  }\n+\n+  jwt.verify(token, config.secret, (err, decoded) => {\n+    if (err) {\n+      return catchError(err, res)\n+    }\n+    console.log(decoded.id)\n+    req.userId = decoded.id\n+    next()\n+  })\n+}\n+\n+isAdmin = (req, res, next) => {\n+  User.findById(req.userId).exec((err, user) => {\n+    if (err) {\n+      res.status(500).send({ message: err })\n+      return\n+    }\n+\n+    Role.find(\n+      {\n+        _id: { $in: user.roles },\n+      },\n+      (err, roles) => {\n+        if (err) {\n+          res.status(500).send({ message: err })\n+          return\n+        }\n+\n+        for (let i = 0; i < roles.length; i++) {\n+          if (roles[i].name === \"admin\") {\n+            next()\n+            return\n+          }\n+        }\n+\n+        res.status(403).send({ message: \"Require Admin Role!\" })\n+        return\n+      }\n+    )\n+  })\n+}\n+\n+isBranchAdmin = (req, res, next) => {\n+  User.findById(req.userId).exec((err, user) => {\n+    if (err) {\n+      res.status(500).send({ message: err })\n+      return\n+    }\n+\n+    Role.find(\n+      {\n+        _id: { $in: user.roles },\n+      },\n+      (err, roles) => {\n+        if (err) {\n+          res.status(500).send({ message: err })\n+          return\n+        }\n+\n+        for (let i = 0; i < roles.length; i++) {\n+          if (roles[i].name === \"branchadmin\") {\n+            next()\n+            return\n+          }\n+        }\n+\n+        res.status(403).send({ message: \"Require branchadmin Role!\" })\n+        return\n+      }\n+    )\n+  })\n+}\n+\n+isSuperAdmin = (req, res, next) => {\n+  console.log(req.userId)\n+  User.findById(req.userId).exec((err, user) => {\n+    if (err) {\n+      res.status(500).send({ message: err })\n+      return\n+    }\n+\n+    Role.find(\n+      {\n+        _id: { $in: user.roles },\n+      },\n+      (err, roles) => {\n+        if (err) {\n+          res.status(500).send({ message: err })\n+          return\n+        }\n+\n+        for (let i = 0; i < roles.length; i++) {\n+          if (roles[i].name === \"superadmin\") {\n+            next()\n+            return\n+          }\n+        }\n+\n+        res.status(403).send({ message: \"Require superadmin Role!\" })\n+        return\n+      }\n+    )\n+  })\n+}\n+\n+isStaffAccount = (req, res, next) => {\n+  User.findById(req.userId).exec((err, user) => {\n+    if (err) {\n+      res.status(500).send({ message: err })\n+      return\n+    }\n+\n+    Role.find(\n+      {\n+        _id: { $in: user.roles },\n+      },\n+      (err, roles) => {\n+        if (err) {\n+          res.status(500).send({ message: err })\n+          return\n+        }\n+\n+        for (let i = 0; i < roles.length; i++) {\n+          if (roles[i].name === \"staffaccount\") {\n+            next()\n+            return\n+          }\n+        }\n+\n+        res.status(403).send({ message: \"Require staffaccount Role!\" })\n+        return\n+      }\n+    )\n+  })\n+}\n+\n+isOperationalAdmin = (req, res, next) => {\n+  User.findById(req.userId).exec((err, user) => {\n+    if (err) {\n+      res.status(500).send({ message: err })\n+      return\n+    }\n+\n+    Role.find(\n+      {\n+        _id: { $in: user.roles },\n+      },\n+      (err, roles) => {\n+        if (err) {\n+          res.status(500).send({ message: err })\n+          return\n+        }\n+\n+        for (let i = 0; i < roles.length; i++) {\n+          if (roles[i].name === \"operationaladmin\") {\n+            next()\n+            return\n+          }\n+        }\n+\n+        res.status(403).send({ message: \"Require OperationalAdmin Role!\" })\n+        return\n+      }\n+    )\n+  })\n+}\n+\n+const authJwt = {\n+  verifyToken,\n+  isAdmin,\n+  isBranchAdmin,\n+  isSuperAdmin,\n+  isStaffAccount,\n+  isOperationalAdmin\n+}\n+module.exports = authJwt\n"
                },
                {
                    "date": 1687155362903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,8 @@\n   jwt.verify(token, config.secret, (err, decoded) => {\n     if (err) {\n       return catchError(err, res)\n     }\n-    console.log(decoded.id)\n     req.userId = decoded.id\n     next()\n   })\n }\n@@ -195,202 +194,4 @@\n   isStaffAccount,\n   isOperationalAdmin\n }\n module.exports = authJwt\n-const jwt = require(\"jsonwebtoken\")\n-const config = require(\"../config/auth.config.js\")\n-const db = require(\"../models\")\n-const User = db.user\n-const Role = db.role\n-\n-const { TokenExpiredError } = jwt\n-\n-const catchError = (err, res) => {\n-  if(err instanceof TokenExpiredError) {\n-    return res.status(401).send({ message: \"Unauthorized! Access Token was expired!\" })\n-  }\n-  return res.sendStatus(401).send({ message: \"Unauthorised!\"})\n-}\n-\n-verifyToken = (req, res, next) => {\n-  let token = req.headers[\"x-access-token\"]\n-  //let token = req.session.token\n-\n-  if (!token) {\n-    return res.status(403).send({ message: \"No token provided!\" })\n-  }\n-\n-  jwt.verify(token, config.secret, (err, decoded) => {\n-    if (err) {\n-      return catchError(err, res)\n-    }\n-    cl\n-    req.userId = decoded.id\n-    next()\n-  })\n-}\n-\n-isAdmin = (req, res, next) => {\n-  User.findById(req.userId).exec((err, user) => {\n-    if (err) {\n-      res.status(500).send({ message: err })\n-      return\n-    }\n-\n-    Role.find(\n-      {\n-        _id: { $in: user.roles },\n-      },\n-      (err, roles) => {\n-        if (err) {\n-          res.status(500).send({ message: err })\n-          return\n-        }\n-\n-        for (let i = 0; i < roles.length; i++) {\n-          if (roles[i].name === \"admin\") {\n-            next()\n-            return\n-          }\n-        }\n-\n-        res.status(403).send({ message: \"Require Admin Role!\" })\n-        return\n-      }\n-    )\n-  })\n-}\n-\n-isBranchAdmin = (req, res, next) => {\n-  User.findById(req.userId).exec((err, user) => {\n-    if (err) {\n-      res.status(500).send({ message: err })\n-      return\n-    }\n-\n-    Role.find(\n-      {\n-        _id: { $in: user.roles },\n-      },\n-      (err, roles) => {\n-        if (err) {\n-          res.status(500).send({ message: err })\n-          return\n-        }\n-\n-        for (let i = 0; i < roles.length; i++) {\n-          if (roles[i].name === \"branchadmin\") {\n-            next()\n-            return\n-          }\n-        }\n-\n-        res.status(403).send({ message: \"Require branchadmin Role!\" })\n-        return\n-      }\n-    )\n-  })\n-}\n-\n-isSuperAdmin = (req, res, next) => {\n-  console.log(req.userId)\n-  User.findById(req.userId).exec((err, user) => {\n-    if (err) {\n-      res.status(500).send({ message: err })\n-      return\n-    }\n-\n-    Role.find(\n-      {\n-        _id: { $in: user.roles },\n-      },\n-      (err, roles) => {\n-        if (err) {\n-          res.status(500).send({ message: err })\n-          return\n-        }\n-\n-        for (let i = 0; i < roles.length; i++) {\n-          if (roles[i].name === \"superadmin\") {\n-            next()\n-            return\n-          }\n-        }\n-\n-        res.status(403).send({ message: \"Require superadmin Role!\" })\n-        return\n-      }\n-    )\n-  })\n-}\n-\n-isStaffAccount = (req, res, next) => {\n-  User.findById(req.userId).exec((err, user) => {\n-    if (err) {\n-      res.status(500).send({ message: err })\n-      return\n-    }\n-\n-    Role.find(\n-      {\n-        _id: { $in: user.roles },\n-      },\n-      (err, roles) => {\n-        if (err) {\n-          res.status(500).send({ message: err })\n-          return\n-        }\n-\n-        for (let i = 0; i < roles.length; i++) {\n-          if (roles[i].name === \"staffaccount\") {\n-            next()\n-            return\n-          }\n-        }\n-\n-        res.status(403).send({ message: \"Require staffaccount Role!\" })\n-        return\n-      }\n-    )\n-  })\n-}\n-\n-isOperationalAdmin = (req, res, next) => {\n-  User.findById(req.userId).exec((err, user) => {\n-    if (err) {\n-      res.status(500).send({ message: err })\n-      return\n-    }\n-\n-    Role.find(\n-      {\n-        _id: { $in: user.roles },\n-      },\n-      (err, roles) => {\n-        if (err) {\n-          res.status(500).send({ message: err })\n-          return\n-        }\n-\n-        for (let i = 0; i < roles.length; i++) {\n-          if (roles[i].name === \"operationaladmin\") {\n-            next()\n-            return\n-          }\n-        }\n-\n-        res.status(403).send({ message: \"Require OperationalAdmin Role!\" })\n-        return\n-      }\n-    )\n-  })\n-}\n-\n-const authJwt = {\n-  verifyToken,\n-  isAdmin,\n-  isBranchAdmin,\n-  isSuperAdmin,\n-  isStaffAccount,\n-  isOperationalAdmin\n-}\n-module.exports = authJwt\n"
                },
                {
                    "date": 1687155374838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n \n verifyToken = (req, res, next) => {\n   let token = req.headers[\"x-access-token\"]\n   //let token = req.session.token\n+  \n \n   if (!token) {\n     return res.status(403).send({ message: \"No token provided!\" })\n   }\n"
                },
                {
                    "date": 1687155381160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \n verifyToken = (req, res, next) => {\n   let token = req.headers[\"x-access-token\"]\n   //let token = req.session.token\n-  \n+  console.log(toekn)\n \n   if (!token) {\n     return res.status(403).send({ message: \"No token provided!\" })\n   }\n"
                },
                {
                    "date": 1687155403269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \n verifyToken = (req, res, next) => {\n   let token = req.headers[\"x-access-token\"]\n   //let token = req.session.token\n-  console.log(toekn)\n+  console.log(token)\n \n   if (!token) {\n     return res.status(403).send({ message: \"No token provided!\" })\n   }\n"
                },
                {
                    "date": 1687155735086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \n verifyToken = (req, res, next) => {\n   let token = req.headers[\"x-access-token\"]\n   //let token = req.session.token\n-  console.log(token)\n+  \n \n   if (!token) {\n     return res.status(403).send({ message: \"No token provided!\" })\n   }\n"
                },
                {
                    "date": 1687155741973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,17 +14,17 @@\n }\n \n verifyToken = (req, res, next) => {\n   let token = req.headers[\"x-access-token\"]\n-  //let token = req.session.token\n-  \n+  //let token = req.session.token  \n \n   if (!token) {\n     return res.status(403).send({ message: \"No token provided!\" })\n   }\n \n   jwt.verify(token, config.secret, (err, decoded) => {\n     if (err) {\n+      console.log(err)\n       return catchError(err, res)\n     }\n     req.userId = decoded.id\n     next()\n"
                },
                {
                    "date": 1687155751013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,9 @@\n     return res.status(403).send({ message: \"No token provided!\" })\n   }\n \n   jwt.verify(token, config.secret, (err, decoded) => {\n+    \n     if (err) {\n       console.log(err)\n       return catchError(err, res)\n     }\n"
                },
                {
                    "date": 1687155760133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     return res.status(403).send({ message: \"No token provided!\" })\n   }\n \n   jwt.verify(token, config.secret, (err, decoded) => {\n-    \n+    console.log(config.secret)\n     if (err) {\n       console.log(err)\n       return catchError(err, res)\n     }\n"
                },
                {
                    "date": 1687155792057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n \n   jwt.verify(token, config.secret, (err, decoded) => {\n     console.log(config.secret)\n     if (err) {\n-      console.log(err)\n+      console.log(\"errerr)\n       return catchError(err, res)\n     }\n     req.userId = decoded.id\n     next()\n"
                },
                {
                    "date": 1687155827297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,11 +21,11 @@\n     return res.status(403).send({ message: \"No token provided!\" })\n   }\n \n   jwt.verify(token, config.secret, (err, decoded) => {\n-    console.log(config.secret)\n+    \n     if (err) {\n-      console.log(\"errerr)\n+      console.log(\"err : \" + err)\n       return catchError(err, res)\n     }\n     req.userId = decoded.id\n     next()\n"
                },
                {
                    "date": 1687155841224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,12 +20,10 @@\n   if (!token) {\n     return res.status(403).send({ message: \"No token provided!\" })\n   }\n \n-  jwt.verify(token, config.secret, (err, decoded) => {\n-    \n+  jwt.verify(token, config.secret, (err, decoded) => {    \n     if (err) {\n-      console.log(\"err : \" + err)\n       return catchError(err, res)\n     }\n     req.userId = decoded.id\n     next()\n@@ -94,9 +92,8 @@\n   })\n }\n \n isSuperAdmin = (req, res, next) => {\n-  console.log(req.userId)\n   User.findById(req.userId).exec((err, user) => {\n     if (err) {\n       res.status(500).send({ message: err })\n       return\n"
                },
                {
                    "date": 1687155991581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,10 @@\n   if (!token) {\n     return res.status(403).send({ message: \"No token provided!\" })\n   }\n \n-  jwt.verify(token, config.secret, (err, decoded) => {    \n+  jwt.verify(token, config.secret, (err, decoded) => {\n+    cl\n     if (err) {\n       return catchError(err, res)\n     }\n     req.userId = decoded.id\n"
                },
                {
                    "date": 1687156021681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,8 @@\n     return res.status(403).send({ message: \"No token provided!\" })\n   }\n \n   jwt.verify(token, config.secret, (err, decoded) => {\n-    cl\n     if (err) {\n       return catchError(err, res)\n     }\n     req.userId = decoded.id\n"
                },
                {
                    "date": 1687156326238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,9 @@\n     return res.status(403).send({ message: \"No token provided!\" })\n   }\n \n   jwt.verify(token, config.secret, (err, decoded) => {\n+    \n     if (err) {\n       return catchError(err, res)\n     }\n     req.userId = decoded.id\n"
                },
                {
                    "date": 1687156331523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     return res.status(403).send({ message: \"No token provided!\" })\n   }\n \n   jwt.verify(token, config.secret, (err, decoded) => {\n-    \n+    console.log(de)\n     if (err) {\n       return catchError(err, res)\n     }\n     req.userId = decoded.id\n"
                },
                {
                    "date": 1687156381110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,13 +21,13 @@\n     return res.status(403).send({ message: \"No token provided!\" })\n   }\n \n   jwt.verify(token, config.secret, (err, decoded) => {\n-    console.log(de)\n+    console.log(decoded)\n     if (err) {\n       return catchError(err, res)\n     }\n-    req.userId = decoded.id\n+    req.userId = decoded._id\n     next()\n   })\n }\n \n"
                },
                {
                    "date": 1687156452169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,8 @@\n     return res.status(403).send({ message: \"No token provided!\" })\n   }\n \n   jwt.verify(token, config.secret, (err, decoded) => {\n-    console.log(decoded)\n     if (err) {\n       return catchError(err, res)\n     }\n     req.userId = decoded._id\n"
                },
                {
                    "date": 1687324417363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n   jwt.verify(token, config.secret, (err, decoded) => {\n     if (err) {\n       return catchError(err, res)\n     }\n-    req.userId = decoded._id\n+    req.userId = decoded.id\n     next()\n   })\n }\n \n"
                },
                {
                    "date": 1687525494687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,10 @@\n   }\n   return res.sendStatus(401).send({ message: \"Unauthorised!\"})\n }\n \n+\n+\n verifyToken = (req, res, next) => {\n   let token = req.headers[\"x-access-token\"]\n   //let token = req.session.token  \n \n"
                },
                {
                    "date": 1687525503003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,10 @@\n   }\n   return res.sendStatus(401).send({ message: \"Unauthorised!\"})\n }\n \n+const isLoggedIn\n \n-\n verifyToken = (req, res, next) => {\n   let token = req.headers[\"x-access-token\"]\n   //let token = req.session.token  \n \n"
                },
                {
                    "date": 1687525515763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n   }\n   return res.sendStatus(401).send({ message: \"Unauthorised!\"})\n }\n \n-const isLoggedIn\n+const isLoggedIn = async (req, res, next)\n \n verifyToken = (req, res, next) => {\n   let token = req.headers[\"x-access-token\"]\n   //let token = req.session.token  \n"
                },
                {
                    "date": 1687525523873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,11 @@\n   }\n   return res.sendStatus(401).send({ message: \"Unauthorised!\"})\n }\n \n-const isLoggedIn = async (req, res, next)\n+const isLoggedIn = async (req, res, next) => {\n+  \n+}\n \n verifyToken = (req, res, next) => {\n   let token = req.headers[\"x-access-token\"]\n   //let token = req.session.token  \n"
                },
                {
                    "date": 1687525529219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,11 @@\n   return res.sendStatus(401).send({ message: \"Unauthorised!\"})\n }\n \n const isLoggedIn = async (req, res, next) => {\n-  \n+  try {\n+    \n+  }\n }\n \n verifyToken = (req, res, next) => {\n   let token = req.headers[\"x-access-token\"]\n"
                },
                {
                    "date": 1687525541459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n }\n \n const isLoggedIn = async (req, res, next) => {\n   try {\n+    // check if auth header is exists\n     \n   }\n }\n \n"
                },
                {
                    "date": 1687525551159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \n const isLoggedIn = async (req, res, next) => {\n   try {\n     // check if auth header is exists\n-    \n+    if(req.)\n   }\n }\n \n verifyToken = (req, res, next) => {\n"
                },
                {
                    "date": 1687525558933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \n const isLoggedIn = async (req, res, next) => {\n   try {\n     // check if auth header is exists\n-    if(req.)\n+    if(req.headers.au)\n   }\n }\n \n verifyToken = (req, res, next) => {\n"
                },
                {
                    "date": 1687525611107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \n const isLoggedIn = async (req, res, next) => {\n   try {\n     // check if auth header is exists\n-    if(req.headers.au)\n+    if(req.headers.authJwt)\n   }\n }\n \n verifyToken = (req, res, next) => {\n"
                },
                {
                    "date": 1687525617718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,11 @@\n \n const isLoggedIn = async (req, res, next) => {\n   try {\n     // check if auth header is exists\n-    if(req.headers.authJwt)\n+    if(req.headers.authJwt) {\n+      \n+    }\n   }\n }\n \n verifyToken = (req, res, next) => {\n"
                },
                {
                    "date": 1687525627850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n const isLoggedIn = async (req, res, next) => {\n   try {\n     // check if auth header is exists\n     if(req.headers.authJwt) {\n-      \n+      // parse toekn from \n     }\n   }\n }\n \n"
                },
                {
                    "date": 1687525638412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,10 @@\n const isLoggedIn = async (req, res, next) => {\n   try {\n     // check if auth header is exists\n     if(req.headers.authJwt) {\n-      // parse toekn from \n+      // parse toekn from header\n+      const token = \n     }\n   }\n }\n \n"
                },
                {
                    "date": 1687525644094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n   try {\n     // check if auth header is exists\n     if(req.headers.authJwt) {\n       // parse toekn from header\n-      const token = \n+      const token = req.headers\n     }\n   }\n }\n \n"
                },
                {
                    "date": 1687525652181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n   try {\n     // check if auth header is exists\n     if(req.headers.authJwt) {\n       // parse toekn from header\n-      const token = req.headers\n+      const token = req.headers.authJwt.s\n     }\n   }\n }\n \n"
                },
                {
                    "date": 1687525661252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n   try {\n     // check if auth header is exists\n     if(req.headers.authJwt) {\n       // parse toekn from header\n-      const token = req.headers.authJwt.s\n+      const token = req.headers.authJwt.split(\" \")\n     }\n   }\n }\n \n"
                },
                {
                    "date": 1687525667468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,10 @@\n   try {\n     // check if auth header is exists\n     if(req.headers.authJwt) {\n       // parse toekn from header\n-      const token = req.headers.authJwt.split(\" \")\n+      const token = req.headers.authJwt.split(\" \")[1]\n+      \n     }\n   }\n }\n \n"
                },
                {
                    "date": 1687525673463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     // check if auth header is exists\n     if(req.headers.authJwt) {\n       // parse toekn from header\n       const token = req.headers.authJwt.split(\" \")[1]\n-      \n+      if(toekn)\n     }\n   }\n }\n \n"
                },
                {
                    "date": 1687525683590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,11 @@\n     // check if auth header is exists\n     if(req.headers.authJwt) {\n       // parse toekn from header\n       const token = req.headers.authJwt.split(\" \")[1]\n-      if(toekn)\n+      if(token) {\n+        const payload = \n+      }\n     }\n   }\n }\n \n"
                },
                {
                    "date": 1687525691968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     if(req.headers.authJwt) {\n       // parse toekn from header\n       const token = req.headers.authJwt.split(\" \")[1]\n       if(token) {\n-        const payload = \n+        const payload = await jwt\n       }\n     }\n   }\n }\n"
                },
                {
                    "date": 1687525701982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     if(req.headers.authJwt) {\n       // parse toekn from header\n       const token = req.headers.authJwt.split(\" \")[1]\n       if(token) {\n-        const payload = await jwt\n+        const payload = await jwt.verify(token, )\n       }\n     }\n   }\n }\n"
                },
                {
                    "date": 1687525727690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     if(req.headers.authJwt) {\n       // parse toekn from header\n       const token = req.headers.authJwt.split(\" \")[1]\n       if(token) {\n-        const payload = await jwt.verify(token, )\n+        const payload = await jwt.verify(token, config.secret, (err, decoded))\n       }\n     }\n   }\n }\n"
                },
                {
                    "date": 1687525749636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n   try {\n     // check if auth header is exists\n     if(req.headers.authJwt) {\n       // parse toekn from header\n-      const token = req.headers.authJwt.split(\" \")[1]\n+      const token = req.headers[\"x-access-token\"].split(\" \")[1]\n       if(token) {\n         const payload = await jwt.verify(token, config.secret, (err, decoded))\n       }\n     }\n"
                },
                {
                    "date": 1687525761000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n       // parse toekn from header\n       const token = req.headers[\"x-access-token\"].split(\" \")[1]\n       if(token) {\n         const payload = await jwt.verify(token, config.secret, (err, decoded))\n+        const payload = await jwt.verify(token, process.env.SECRET);\n       }\n     }\n   }\n }\n"
                },
                {
                    "date": 1687525767022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n       // parse toekn from header\n       const token = req.headers[\"x-access-token\"].split(\" \")[1]\n       if(token) {\n         const payload = await jwt.verify(token, config.secret, (err, decoded))\n-        const payload = await jwt.verify(token, process.env.SECRET);\n+        \n       }\n     }\n   }\n }\n"
                },
                {
                    "date": 1687525773153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,11 @@\n       // parse toekn from header\n       const token = req.headers[\"x-access-token\"].split(\" \")[1]\n       if(token) {\n         const payload = await jwt.verify(token, config.secret, (err, decoded))\n-        \n+        if(payload) {\n+          \n+        }\n       }\n     }\n   }\n }\n"
                },
                {
                    "date": 1687525780070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n       const token = req.headers[\"x-access-token\"].split(\" \")[1]\n       if(token) {\n         const payload = await jwt.verify(token, config.secret, (err, decoded))\n         if(payload) {\n-          \n+          // stro\n         }\n       }\n     }\n   }\n"
                },
                {
                    "date": 1687525790273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n       const token = req.headers[\"x-access-token\"].split(\" \")[1]\n       if(token) {\n         const payload = await jwt.verify(token, config.secret, (err, decoded))\n         if(payload) {\n-          // stro\n+          // store user data n\n         }\n       }\n     }\n   }\n"
                },
                {
                    "date": 1687525797352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,10 @@\n       const token = req.headers[\"x-access-token\"].split(\" \")[1]\n       if(token) {\n         const payload = await jwt.verify(token, config.secret, (err, decoded))\n         if(payload) {\n-          // store user data n\n+          // store user data in request object\n+          \n         }\n       }\n     }\n   }\n"
                },
                {
                    "date": 1687525802668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n       if(token) {\n         const payload = await jwt.verify(token, config.secret, (err, decoded))\n         if(payload) {\n           // store user data in request object\n-          \n+          req.user = \n         }\n       }\n     }\n   }\n"
                },
                {
                    "date": 1687525811028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,10 @@\n       if(token) {\n         const payload = await jwt.verify(token, config.secret, (err, decoded))\n         if(payload) {\n           // store user data in request object\n-          req.user = \n+          req.user = payload\n+          next()\n         }\n       }\n     }\n   }\n"
                },
                {
                    "date": 1687525817179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,10 @@\n         if(payload) {\n           // store user data in request object\n           req.user = payload\n           next()\n+        } else {\n+          \n         }\n       }\n     }\n   }\n"
                },
                {
                    "date": 1687525826894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n           // store user data in request object\n           req.user = payload\n           next()\n         } else {\n-          \n+          reres.\n         }\n       }\n     }\n   }\n"
                },
                {
                    "date": 1687525835933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n           // store user data in request object\n           req.user = payload\n           next()\n         } else {\n-          reres.\n+          return res.status(400)\n         }\n       }\n     }\n   }\n"
                },
                {
                    "date": 1687525841996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n           // store user data in request object\n           req.user = payload\n           next()\n         } else {\n-          return res.status(400)\n+          return res.status(400).send\n         }\n       }\n     }\n   }\n"
                },
                {
                    "date": 1687525847376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n           // store user data in request object\n           req.user = payload\n           next()\n         } else {\n-          return res.status(400).send\n+          return res.status(400).send({ message: \"\"})\n         }\n       }\n     }\n   }\n"
                },
                {
                    "date": 1687525856335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n           // store user data in request object\n           req.user = payload\n           next()\n         } else {\n-          return res.status(400).send({ message: \"\"})\n+          return res.status(400).send({ message: \"token verification \"})\n         }\n       }\n     }\n   }\n"
                },
                {
                    "date": 1687525870374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,10 +25,12 @@\n           // store user data in request object\n           req.user = payload\n           next()\n         } else {\n-          return res.status(400).send({ message: \"token verification \"})\n+          return res.status(400).send({ message: \"token verification failed\"})\n         }\n+      } else {\n+        \n       }\n     }\n   }\n }\n"
                },
                {
                    "date": 1687525882682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n         } else {\n           return res.status(400).send({ message: \"token verification failed\"})\n         }\n       } else {\n-        \n+        return res.status(400)\n       }\n     }\n   }\n }\n"
                },
                {
                    "date": 1687525890403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n         } else {\n           return res.status(400).send({ message: \"token verification failed\"})\n         }\n       } else {\n-        return res.status(400)\n+        return res.status(400).send({ message: \"\"})\n       }\n     }\n   }\n }\n"
                },
                {
                    "date": 1687525896089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n         } else {\n           return res.status(400).send({ message: \"token verification failed\"})\n         }\n       } else {\n-        return res.status(400).send({ message: \"\"})\n+        return res.status(400).send({ message: \"malformed \"})\n       }\n     }\n   }\n }\n"
                },
                {
                    "date": 1687525906115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,10 +28,12 @@\n         } else {\n           return res.status(400).send({ message: \"token verification failed\"})\n         }\n       } else {\n-        return res.status(400).send({ message: \"malformed \"})\n+        return res.status(400).send({ message: \"malformed auth header\"})\n       }\n+    } else {\n+      \n     }\n   }\n }\n \n"
                },
                {
                    "date": 1687525913761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n       } else {\n         return res.status(400).send({ message: \"malformed auth header\"})\n       }\n     } else {\n-      \n+      return res.status(400)\n     }\n   }\n }\n \n"
                },
                {
                    "date": 1687525923094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n       } else {\n         return res.status(400).send({ message: \"malformed auth header\"})\n       }\n     } else {\n-      return res.status(400)\n+      return res.status(400).send()\n     }\n   }\n }\n \n"
                },
                {
                    "date": 1687525929104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n       } else {\n         return res.status(400).send({ message: \"malformed auth header\"})\n       }\n     } else {\n-      return res.status(400).send()\n+      return res.status(400).send({ message: \"\"})\n     }\n   }\n }\n \n"
                },
                {
                    "date": 1687525936776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n       } else {\n         return res.status(400).send({ message: \"malformed auth header\"})\n       }\n     } else {\n-      return res.status(400).send({ message: \"\"})\n+      return res.status(400).send({ message: \"No authorization header\"})\n     }\n   }\n }\n \n"
                },
                {
                    "date": 1687525944140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,10 @@\n       }\n     } else {\n       return res.status(400).send({ message: \"No authorization header\"})\n     }\n+  } catch {\n+    \n   }\n }\n \n verifyToken = (req, res, next) => {\n"
                },
                {
                    "date": 1687525950866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,10 +33,10 @@\n       }\n     } else {\n       return res.status(400).send({ message: \"No authorization header\"})\n     }\n-  } catch {\n-    \n+  } catch (err ) {\n+\n   }\n }\n \n verifyToken = (req, res, next) => {\n"
                },
                {
                    "date": 1687525957204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,10 +33,12 @@\n       }\n     } else {\n       return res.status(400).send({ message: \"No authorization header\"})\n     }\n-  } catch (err ) {\n+  } catch (err => {\n \n+  })\n+\n   }\n }\n \n verifyToken = (req, res, next) => {\n"
                },
                {
                    "date": 1687525964215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,13 +33,9 @@\n       }\n     } else {\n       return res.status(400).send({ message: \"No authorization header\"})\n     }\n-  } catch (err => {\n-\n-  })\n-\n-  }\n+  } ca\n }\n \n verifyToken = (req, res, next) => {\n   let token = req.headers[\"x-access-token\"]\n"
                },
                {
                    "date": 1687525969858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,11 @@\n       }\n     } else {\n       return res.status(400).send({ message: \"No authorization header\"})\n     }\n-  } ca\n+  } catch(err => {\n+    \n+  })\n }\n \n verifyToken = (req, res, next) => {\n   let token = req.headers[\"x-access-token\"]\n"
                },
                {
                    "date": 1687525982559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     } else {\n       return res.status(400).send({ message: \"No authorization header\"})\n     }\n   } catch(err => {\n-    \n+    res.status(400)\n   })\n }\n \n verifyToken = (req, res, next) => {\n"
                },
                {
                    "date": 1687525989974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     } else {\n       return res.status(400).send({ message: \"No authorization header\"})\n     }\n   } catch(err => {\n-    res.status(400)\n+    res.status(400).send({ message: })\n   })\n }\n \n verifyToken = (req, res, next) => {\n"
                },
                {
                    "date": 1687526000188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     } else {\n       return res.status(400).send({ message: \"No authorization header\"})\n     }\n   } catch(err => {\n-    res.status(400).send({ message: })\n+    return res.status(400).send({ message: err })\n   })\n }\n \n verifyToken = (req, res, next) => {\n"
                },
                {
                    "date": 1687526012232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n       }\n     } else {\n       return res.status(400).send({ message: \"No authorization header\"})\n     }\n-  } catch(err => {\n+  } catch(err) => {\n     return res.status(400).send({ message: err })\n   })\n }\n \n"
                },
                {
                    "date": 1687526018863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n       }\n     } else {\n       return res.status(400).send({ message: \"No authorization header\"})\n     }\n-  } catch(err) => {\n+  } catch(err => {\n     return res.status(400).send({ message: err })\n   })\n }\n \n"
                },
                {
                    "date": 1687526042083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n       }\n     } else {\n       return res.status(400).send({ message: \"No authorization header\"})\n     }\n-  } catch(err => {\n+  } catch( (err => {\n     return res.status(400).send({ message: err })\n   })\n }\n \n"
                },
                {
                    "date": 1687526054597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,11 +33,9 @@\n       }\n     } else {\n       return res.status(400).send({ message: \"No authorization header\"})\n     }\n-  } catch( (err => {\n-    return res.status(400).send({ message: err })\n-  })\n+  }\n }\n \n verifyToken = (req, res, next) => {\n   let token = req.headers[\"x-access-token\"]\n"
                },
                {
                    "date": 1687526068173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n       }\n     } else {\n       return res.status(400).send({ message: \"No authorization header\"})\n     }\n-  }\n+  } catch()\n }\n \n verifyToken = (req, res, next) => {\n   let token = req.headers[\"x-access-token\"]\n"
                },
                {
                    "date": 1687526079258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,11 @@\n       }\n     } else {\n       return res.status(400).send({ message: \"No authorization header\"})\n     }\n-  } catch()\n+  } catch( (err => {\n+\n+  })\n }\n \n verifyToken = (req, res, next) => {\n   let token = req.headers[\"x-access-token\"]\n"
                },
                {
                    "date": 1687526090558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,11 +33,11 @@\n       }\n     } else {\n       return res.status(400).send({ message: \"No authorization header\"})\n     }\n-  } catch( (err => {\n-\n-  })\n+  } catch (error) {\n+    res.status(400).json({ error });\n+  }\n }\n \n verifyToken = (req, res, next) => {\n   let token = req.headers[\"x-access-token\"]\n"
                },
                {
                    "date": 1687526113793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     } else {\n       return res.status(400).send({ message: \"No authorization header\"})\n     }\n   } catch (error) {\n-    res.status(400).json({ error });\n+    res.status(400).json({ error })\n   }\n }\n \n verifyToken = (req, res, next) => {\n@@ -212,8 +212,9 @@\n }\n \n const authJwt = {\n   verifyToken,\n+  isLoggedIn,\n   isAdmin,\n   isBranchAdmin,\n   isSuperAdmin,\n   isStaffAccount,\n"
                },
                {
                    "date": 1687526827535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \n const isLoggedIn = async (req, res, next) => {\n   try {\n     // check if auth header is exists\n-    if(req.headers.authJwt) {\n+    if(req.headers) {\n       // parse toekn from header\n       const token = req.headers[\"x-access-token\"].split(\" \")[1]\n       if(token) {\n         const payload = await jwt.verify(token, config.secret, (err, decoded))\n"
                },
                {
                    "date": 1687526861558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n     // check if auth header is exists\n     if(req.headers) {\n       // parse toekn from header\n       const token = req.headers[\"x-access-token\"].split(\" \")[1]\n+      cl\n       if(token) {\n         const payload = await jwt.verify(token, config.secret, (err, decoded))\n         if(payload) {\n           // store user data in request object\n"
                },
                {
                    "date": 1687526866892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     // check if auth header is exists\n     if(req.headers) {\n       // parse toekn from header\n       const token = req.headers[\"x-access-token\"].split(\" \")[1]\n-      cl\n+      console.log(toekn)\n       if(token) {\n         const payload = await jwt.verify(token, config.secret, (err, decoded))\n         if(payload) {\n           // store user data in request object\n"
                },
                {
                    "date": 1687526884714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,12 +15,11 @@\n \n const isLoggedIn = async (req, res, next) => {\n   try {\n     // check if auth header is exists\n-    if(req.headers) {\n+    if(req.headers.authJwt) {\n       // parse toekn from header\n       const token = req.headers[\"x-access-token\"].split(\" \")[1]\n-      console.log(toekn)\n       if(token) {\n         const payload = await jwt.verify(token, config.secret, (err, decoded))\n         if(payload) {\n           // store user data in request object\n"
                },
                {
                    "date": 1687526893683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \n const isLoggedIn = async (req, res, next) => {\n   try {\n     // check if auth header is exists\n-    if(req.headers.authJwt) {\n+    if(req.headers.autherization) {\n       // parse toekn from header\n       const token = req.headers[\"x-access-token\"].split(\" \")[1]\n       if(token) {\n         const payload = await jwt.verify(token, config.secret, (err, decoded))\n"
                },
                {
                    "date": 1687526900041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n     // check if auth header is exists\n     if(req.headers.autherization) {\n       // parse toekn from header\n       const token = req.headers[\"x-access-token\"].split(\" \")[1]\n+      console.log()\n       if(token) {\n         const payload = await jwt.verify(token, config.secret, (err, decoded))\n         if(payload) {\n           // store user data in request object\n"
                },
                {
                    "date": 1687526922073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,12 +15,12 @@\n \n const isLoggedIn = async (req, res, next) => {\n   try {\n     // check if auth header is exists\n-    if(req.headers.autherization) {\n+    if(req.headers[\"x-access-token\"]) {\n       // parse toekn from header\n       const token = req.headers[\"x-access-token\"].split(\" \")[1]\n-      console.log()\n+      console.log(token)\n       if(token) {\n         const payload = await jwt.verify(token, config.secret, (err, decoded))\n         if(payload) {\n           // store user data in request object\n"
                },
                {
                    "date": 1687526951164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \n const isLoggedIn = async (req, res, next) => {\n   try {\n     // check if auth header is exists\n-    if(req.headers[\"x-access-token\"]) {\n+    if(req.headers) {\n       // parse toekn from header\n       const token = req.headers[\"x-access-token\"].split(\" \")[1]\n       console.log(token)\n       if(token) {\n"
                },
                {
                    "date": 1687526957493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n }\n \n const isLoggedIn = async (req, res, next) => {\n   try {\n+    cl\n     // check if auth header is exists\n     if(req.headers) {\n       // parse toekn from header\n       const token = req.headers[\"x-access-token\"].split(\" \")[1]\n"
                },
                {
                    "date": 1687526963081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n }\n \n const isLoggedIn = async (req, res, next) => {\n   try {\n-    cl\n+    console.log(req.headers)\n     // check if auth header is exists\n     if(req.headers) {\n       // parse toekn from header\n       const token = req.headers[\"x-access-token\"].split(\" \")[1]\n"
                },
                {
                    "date": 1687526992383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n }\n \n const isLoggedIn = async (req, res, next) => {\n   try {\n-    console.log(req.headers)\n+    console.log(req.headers[\"req.headers[\"x-access-token\"]\"])\n     // check if auth header is exists\n     if(req.headers) {\n       // parse toekn from header\n       const token = req.headers[\"x-access-token\"].split(\" \")[1]\n"
                },
                {
                    "date": 1687527003137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n }\n \n const isLoggedIn = async (req, res, next) => {\n   try {\n-    console.log(req.headers[\"req.headers[\"x-access-token\"]\"])\n+    console.log(req.headers[\"x-access-token])\n     // check if auth header is exists\n     if(req.headers) {\n       // parse toekn from header\n       const token = req.headers[\"x-access-token\"].split(\" \")[1]\n"
                },
                {
                    "date": 1687527010298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n }\n \n const isLoggedIn = async (req, res, next) => {\n   try {\n-    console.log(req.headers[\"x-access-token])\n+    console.log(req.headers[\"x-access-token\"])\n     // check if auth header is exists\n     if(req.headers) {\n       // parse toekn from header\n       const token = req.headers[\"x-access-token\"].split(\" \")[1]\n"
                },
                {
                    "date": 1687527042182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     console.log(req.headers[\"x-access-token\"])\n     // check if auth header is exists\n     if(req.headers) {\n       // parse toekn from header\n-      const token = req.headers[\"x-access-token\"].split(\" \")[1]\n+      const token = req.headers[\"x-access-token\"]\n       console.log(token)\n       if(token) {\n         const payload = await jwt.verify(token, config.secret, (err, decoded))\n         if(payload) {\n"
                },
                {
                    "date": 1687527085405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,14 +14,13 @@\n }\n \n const isLoggedIn = async (req, res, next) => {\n   try {\n-    console.log(req.headers[\"x-access-token\"])\n     // check if auth header is exists\n     if(req.headers) {\n       // parse toekn from header\n       const token = req.headers[\"x-access-token\"]\n-      console.log(token)\n+      \n       if(token) {\n         const payload = await jwt.verify(token, config.secret, (err, decoded))\n         if(payload) {\n           // store user data in request object\n"
                },
                {
                    "date": 1687527106166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n       // parse toekn from header\n       const token = req.headers[\"x-access-token\"]\n       \n       if(token) {\n-        const payload = await jwt.verify(token, config.secret, (err, decoded))\n+        const payload = await jwt.verify(token, process.env.SECRET);\n         if(payload) {\n           // store user data in request object\n           req.user = payload\n           next()\n"
                },
                {
                    "date": 1687527113944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,10 @@\n       // parse toekn from header\n       const token = req.headers[\"x-access-token\"]\n       \n       if(token) {\n-        const payload = await jwt.verify(token, process.env.SECRET);\n+        const payload = await jwt.verify(token, process.env.SECRET)\n+        \n         if(payload) {\n           // store user data in request object\n           req.user = payload\n           next()\n"
                },
                {
                    "date": 1687527120299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n       const token = req.headers[\"x-access-token\"]\n       \n       if(token) {\n         const payload = await jwt.verify(token, process.env.SECRET)\n-        \n+        console.log(payload)\n         if(payload) {\n           // store user data in request object\n           req.user = payload\n           next()\n"
                },
                {
                    "date": 1687527159128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+\n const jwt = require(\"jsonwebtoken\")\n const config = require(\"../config/auth.config.js\")\n const db = require(\"../models\")\n const User = db.user\n"
                },
                {
                    "date": 1687527354798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     // check if auth header is exists\n     if(req.headers) {\n       // parse toekn from header\n       const token = req.headers[\"x-access-token\"]\n-      \n+      cl\n       if(token) {\n         const payload = await jwt.verify(token, process.env.SECRET)\n         console.log(payload)\n         if(payload) {\n"
                },
                {
                    "date": 1687527367094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     // check if auth header is exists\n     if(req.headers) {\n       // parse toekn from header\n       const token = req.headers[\"x-access-token\"]\n-      cl\n+      console.log(\"Token : \" + toke)\n       if(token) {\n         const payload = await jwt.verify(token, process.env.SECRET)\n         console.log(payload)\n         if(payload) {\n"
                },
                {
                    "date": 1687527373057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,12 +19,12 @@\n     // check if auth header is exists\n     if(req.headers) {\n       // parse toekn from header\n       const token = req.headers[\"x-access-token\"]\n-      console.log(\"Token : \" + toke)\n+      console.log(\"Token : \" + token)\n       if(token) {\n         const payload = await jwt.verify(token, process.env.SECRET)\n-        console.log(payload)\n+        console.log(\"\"payload)\n         if(payload) {\n           // store user data in request object\n           req.user = payload\n           next()\n"
                },
                {
                    "date": 1687527379164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n       const token = req.headers[\"x-access-token\"]\n       console.log(\"Token : \" + token)\n       if(token) {\n         const payload = await jwt.verify(token, process.env.SECRET)\n-        console.log(\"\"payload)\n+        console.log(\"Payload : \" + payload)\n         if(payload) {\n           // store user data in request object\n           req.user = payload\n           next()\n"
                },
                {
                    "date": 1687946728300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n   }\n   return res.sendStatus(401).send({ message: \"Unauthorised!\"})\n }\n \n-const isLoggedIn = async (req, res, next) => {\n+const isLoggedIn = (req, res, next) => {\n   try {\n     // check if auth header is exists\n     if(req.headers) {\n       // parse toekn from header\n"
                },
                {
                    "date": 1687946754623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n   }\n   return res.sendStatus(401).send({ message: \"Unauthorised!\"})\n }\n \n-const isLoggedIn = (req, res, next) => {\n+const isLoggedIn = async (req, res, next) => {\n   try {\n     // check if auth header is exists\n     if(req.headers) {\n       // parse toekn from header\n"
                },
                {
                    "date": 1687946760431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n         const payload = await jwt.verify(token, process.env.SECRET)\n         console.log(\"Payload : \" + payload)\n         if(payload) {\n           // store user data in request object\n-          req.user = payload\n+          reutn req.user = payload\n           next()\n         } else {\n           return res.status(400).send({ message: \"token verification failed\"})\n         }\n"
                },
                {
                    "date": 1687946768880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n         const payload = await jwt.verify(token, process.env.SECRET)\n         console.log(\"Payload : \" + payload)\n         if(payload) {\n           // store user data in request object\n-          reutn req.user = payload\n+          retuen req.user = payload\n           next()\n         } else {\n           return res.status(400).send({ message: \"token verification failed\"})\n         }\n"
                },
                {
                    "date": 1687946789068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n   }\n   return res.sendStatus(401).send({ message: \"Unauthorised!\"})\n }\n \n-const isLoggedIn = async (req, res, next) => {\n+const isLoggedIn = (req, res, next) => {\n   try {\n     // check if auth header is exists\n     if(req.headers) {\n       // parse toekn from header\n@@ -25,9 +25,9 @@\n         const payload = await jwt.verify(token, process.env.SECRET)\n         console.log(\"Payload : \" + payload)\n         if(payload) {\n           // store user data in request object\n-          retuen req.user = payload\n+          return req.user = payload\n           next()\n         } else {\n           return res.status(400).send({ message: \"token verification failed\"})\n         }\n"
                },
                {
                    "date": 1687946855841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,11 +19,12 @@\n     // check if auth header is exists\n     if(req.headers) {\n       // parse toekn from header\n       const token = req.headers[\"x-access-token\"]\n+      \n       console.log(\"Token : \" + token)\n       if(token) {\n-        const payload = await jwt.verify(token, process.env.SECRET)\n+        const payload = jwt.verify(token, process.env.SECRET)\n         console.log(\"Payload : \" + payload)\n         if(payload) {\n           // store user data in request object\n           return req.user = payload\n"
                },
                {
                    "date": 1687946864748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     // check if auth header is exists\n     if(req.headers) {\n       // parse toekn from header\n       const token = req.headers[\"x-access-token\"]\n-      \n+      console.log(token)\n       console.log(\"Token : \" + token)\n       if(token) {\n         const payload = jwt.verify(token, process.env.SECRET)\n         console.log(\"Payload : \" + payload)\n"
                },
                {
                    "date": 1687946939872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,8 @@\n     // check if auth header is exists\n     if(req.headers) {\n       // parse toekn from header\n       const token = req.headers[\"x-access-token\"]\n-      console.log(token)\n       console.log(\"Token : \" + token)\n       if(token) {\n         const payload = jwt.verify(token, process.env.SECRET)\n         console.log(\"Payload : \" + payload)\n"
                },
                {
                    "date": 1687946954533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,21 +13,21 @@\n   }\n   return res.sendStatus(401).send({ message: \"Unauthorised!\"})\n }\n \n-const isLoggedIn = (req, res, next) => {\n+const isLoggedIn = async (req, res, next) => {\n   try {\n     // check if auth header is exists\n     if(req.headers) {\n       // parse toekn from header\n       const token = req.headers[\"x-access-token\"]\n       console.log(\"Token : \" + token)\n       if(token) {\n-        const payload = jwt.verify(token, process.env.SECRET)\n+        const payload = await jwt.verify(token, process.env.SECRET)\n         console.log(\"Payload : \" + payload)\n         if(payload) {\n           // store user data in request object\n-          return req.user = payload\n+          req.user = payload\n           next()\n         } else {\n           return res.status(400).send({ message: \"token verification failed\"})\n         }\n"
                },
                {
                    "date": 1687947465305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,9 @@\n verifyToken = (req, res, next) => {\n   let token = req.headers[\"x-access-token\"]\n   //let token = req.session.token  \n \n+  \n   if (!token) {\n     return res.status(403).send({ message: \"No token provided!\" })\n   }\n \n"
                },
                {
                    "date": 1687947472092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n verifyToken = (req, res, next) => {\n   let token = req.headers[\"x-access-token\"]\n   //let token = req.session.token  \n \n-  \n+  console.log(token)\n   if (!token) {\n     return res.status(403).send({ message: \"No token provided!\" })\n   }\n \n"
                },
                {
                    "date": 1687947480812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,9 @@\n   jwt.verify(token, config.secret, (err, decoded) => {\n     if (err) {\n       return catchError(err, res)\n     }\n+    \n     req.userId = decoded.id\n     next()\n   })\n }\n"
                },
                {
                    "date": 1687947488661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n   jwt.verify(token, config.secret, (err, decoded) => {\n     if (err) {\n       return catchError(err, res)\n     }\n-    \n+    console.log(req.userId)\n     req.userId = decoded.id\n     next()\n   })\n }\n"
                },
                {
                    "date": 1687947524565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,9 @@\n     return res.status(403).send({ message: \"No token provided!\" })\n   }\n \n   jwt.verify(token, config.secret, (err, decoded) => {\n+    con\n     if (err) {\n       return catchError(err, res)\n     }\n     console.log(req.userId)\n"
                },
                {
                    "date": 1687947533991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     return res.status(403).send({ message: \"No token provided!\" })\n   }\n \n   jwt.verify(token, config.secret, (err, decoded) => {\n-    con\n+    console.log(\"Decode : \" + de)\n     if (err) {\n       return catchError(err, res)\n     }\n     console.log(req.userId)\n"
                },
                {
                    "date": 1687947558694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,13 +51,13 @@\n     return res.status(403).send({ message: \"No token provided!\" })\n   }\n \n   jwt.verify(token, config.secret, (err, decoded) => {\n-    console.log(\"Decode : \" + de)\n+    console.log(\"Decode : \" + decoded)\n     if (err) {\n       return catchError(err, res)\n     }\n-    console.log(req.userId)\n+    console.log(\"\"req.userId)\n     req.userId = decoded.id\n     next()\n   })\n }\n"
                },
                {
                    "date": 1687947564259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n     console.log(\"Decode : \" + decoded)\n     if (err) {\n       return catchError(err, res)\n     }\n-    console.log(\"\"req.userId)\n+    console.log(\"User Id \"+req.userId)\n     req.userId = decoded.id\n     next()\n   })\n }\n"
                },
                {
                    "date": 1687947571034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n verifyToken = (req, res, next) => {\n   let token = req.headers[\"x-access-token\"]\n   //let token = req.session.token  \n \n-  console.log(token)\n+  console.log(\"\"+token)\n   if (!token) {\n     return res.status(403).send({ message: \"No token provided!\" })\n   }\n \n@@ -55,9 +55,9 @@\n     console.log(\"Decode : \" + decoded)\n     if (err) {\n       return catchError(err, res)\n     }\n-    console.log(\"User Id \"+req.userId)\n+    console.log(\"User Id : \"+req.userId)\n     req.userId = decoded.id\n     next()\n   })\n }\n"
                },
                {
                    "date": 1687947678081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,11 +43,9 @@\n }\n \n verifyToken = (req, res, next) => {\n   let token = req.headers[\"x-access-token\"]\n-  //let token = req.session.token  \n-\n-  console.log(\"\"+token)\n+  //let token = req.session.token \n   if (!token) {\n     return res.status(403).send({ message: \"No token provided!\" })\n   }\n \n"
                },
                {
                    "date": 1687947685558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,18 +44,18 @@\n \n verifyToken = (req, res, next) => {\n   let token = req.headers[\"x-access-token\"]\n   //let token = req.session.token \n+\n   if (!token) {\n     return res.status(403).send({ message: \"No token provided!\" })\n   }\n \n   jwt.verify(token, config.secret, (err, decoded) => {\n-    console.log(\"Decode : \" + decoded)\n     if (err) {\n       return catchError(err, res)\n     }\n-    console.log(\"User Id : \"+req.userId)\n+    \n     req.userId = decoded.id\n     next()\n   })\n }\n"
                }
            ],
            "date": 1687153453737,
            "name": "Commit-0",
            "content": "const jwt = require(\"jsonwebtoken\");\nconst config = require(\"../config/auth.config.js\");\nconst db = require(\"../models\");\nconst User = db.user;\nconst Role = db.role;\n\nconst { TokenExpiredError } = jwt\n\nconst catchError = (err, res) => {\n  if(err instanceof TokenExpiredError) {\n    return res.status(401).send({ message: \"Unauthorized! Access Token was expired!\" })\n  }\n  return res.sendStatus(401).send({ message: \"Unauthorised!\"})\n}\n\nverifyToken = (req, res, next) => {\n  let token = req.headers[\"x-access-token\"]\n  //let token = req.session.token;\n\n  if (!token) {\n    return res.status(403).send({ message: \"No token provided!\" });\n  }\n\n  jwt.verify(token, config.secret, (err, decoded) => {\n    if (err) {\n      return catchError(err, res);\n    }\n    req.userId = decoded.id;\n    next();\n  });\n};\n\nisAdmin = (req, res, next) => {\n  User.findById(req.userId).exec((err, user) => {\n    if (err) {\n      res.status(500).send({ message: err });\n      return;\n    }\n\n    Role.find(\n      {\n        _id: { $in: user.roles },\n      },\n      (err, roles) => {\n        if (err) {\n          res.status(500).send({ message: err });\n          return;\n        }\n\n        for (let i = 0; i < roles.length; i++) {\n          if (roles[i].name === \"admin\") {\n            next();\n            return;\n          }\n        }\n\n        res.status(403).send({ message: \"Require Admin Role!\" });\n        return;\n      }\n    );\n  });\n};\n\nisBranchAdmin = (req, res, next) => {\n  User.findById(req.userId).exec((err, user) => {\n    if (err) {\n      res.status(500).send({ message: err });\n      return;\n    }\n\n    Role.find(\n      {\n        _id: { $in: user.roles },\n      },\n      (err, roles) => {\n        if (err) {\n          res.status(500).send({ message: err });\n          return;\n        }\n\n        for (let i = 0; i < roles.length; i++) {\n          if (roles[i].name === \"branchadmin\") {\n            next();\n            return;\n          }\n        }\n\n        res.status(403).send({ message: \"Require branchadmin Role!\" });\n        return;\n      }\n    );\n  });\n};\n\nisSuperAdmin = (req, res, next) => {\n  \n  User.findById(req.userId).exec((err, user) => {\n    if (err) {\n      res.status(500).send({ message: err });\n      return;\n    }\n\n    Role.find(\n      {\n        _id: { $in: user.roles },\n      },\n      (err, roles) => {\n        if (err) {\n          res.status(500).send({ message: err });\n          return;\n        }\n\n        for (let i = 0; i < roles.length; i++) {\n          if (roles[i].name === \"superadmin\") {\n            next();\n            return;\n          }\n        }\n\n        res.status(403).send({ message: \"Require superadmin Role!\" });\n        return;\n      }\n    );\n  });\n};\n\nisStaffAccount = (req, res, next) => {\n  User.findById(req.userId).exec((err, user) => {\n    if (err) {\n      res.status(500).send({ message: err });\n      return;\n    }\n\n    Role.find(\n      {\n        _id: { $in: user.roles },\n      },\n      (err, roles) => {\n        if (err) {\n          res.status(500).send({ message: err });\n          return;\n        }\n\n        for (let i = 0; i < roles.length; i++) {\n          if (roles[i].name === \"staffaccount\") {\n            next();\n            return;\n          }\n        }\n\n        res.status(403).send({ message: \"Require staffaccount Role!\" });\n        return;\n      }\n    );\n  });\n};\n\nisOperationalAdmin = (req, res, next) => {\n  User.findById(req.userId).exec((err, user) => {\n    if (err) {\n      res.status(500).send({ message: err });\n      return;\n    }\n\n    Role.find(\n      {\n        _id: { $in: user.roles },\n      },\n      (err, roles) => {\n        if (err) {\n          res.status(500).send({ message: err });\n          return;\n        }\n\n        for (let i = 0; i < roles.length; i++) {\n          if (roles[i].name === \"operationaladmin\") {\n            next();\n            return;\n          }\n        }\n\n        res.status(403).send({ message: \"Require OperationalAdmin Role!\" });\n        return;\n      }\n    );\n  });\n};\n\nconst authJwt = {\n  verifyToken,\n  isAdmin,\n  isBranchAdmin,\n  isSuperAdmin,\n  isStaffAccount,\n  isOperationalAdmin\n};\nmodule.exports = authJwt;\n"
        }
    ]
}